/**
 * Generated by Verge3D Puzzles v.3.9.0
 * Thu Feb 03 2022 09:50:43 GMT+0100 (Central European Standard Time)
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */

'use strict';

(function() {

// global variables/constants used by puzzles' functions

var LIST_NONE = '<none>';

var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.pickedObject = '';
_pGlob.hoveredObject = '';
_pGlob.mediaElements = {};
_pGlob.loadedFile = '';
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.openedFile = '';
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.intervalTimers = {};

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster();

var PL = v3d.PL = v3d.PL || {};

// a more readable alias for PL (stands for "Puzzle Logic")
v3d.puzzles = PL;

PL.procedures = PL.procedures || {};




PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    var PROC = {
    
};


// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if (attr === 'style') {
            // NOTE: setting an attribute 'style' instead of a property 'style'
            // fixes IE11 wrong behavior
            elem.setAttribute(attr, value);
        } else if ((attr == 'href' || attr == 'src') && value instanceof Promise) {
            // resolve promise value for url-based attributes
            value.then(function(response) {
                elem[attr] = response;
            });
        } else {
            elem[attr] = value;
        }
    }
}



// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}




// initSettings puzzle
_initGlob.output.initOptions.fadeAnnotations = true;
_initGlob.output.initOptions.useBkgTransp = false;
_initGlob.output.initOptions.preserveDrawBuf = false;
_initGlob.output.initOptions.useCompAssets = false;
_initGlob.output.initOptions.useFullscreen = false;


// initPreloader puzzle
_initGlob.output.initOptions.useCustomPreloader = true;
_initGlob.output.initOptions.preloaderStartCb = function() {
    _initGlob.percentage = 0;
    (function() {})();
};
_initGlob.output.initOptions.preloaderProgressCb = function(percentage) {
    _initGlob.percentage = percentage;
    (function() {
  setHTMLElemAttribute('innerHTML', String(Math.round(_initGlob.percentage)) + '%', 'preloader_percentage', true);
})();
};
_initGlob.output.initOptions.preloaderEndCb = function() {
    _initGlob.percentage = 100;
    (function() {
  setHTMLElemStyle('display', 'none', 'preloader_div', true);
})();
};

    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {

// app is more conventional than appInstance (used in exec script and app templates)
var app = appInstance;

initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}

this.procedures["updateHeight"] = updateHeight;

var PROC = {
    "updateHeight": updateHeight,
};

var horizontal_shelf;



// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return obj.type !== 'AmbientLight' &&
           obj.name !== '' &&
           !(obj.isMesh && obj.isMaterialGeneratedMesh) &&
           !obj.isAuxClippingMesh;
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = _pGlob !== undefined;
    objFound = runTime ? _pGlob.objCache[objName] : null;

    if (objFound && objFound.name === objName)
        return objFound;

    appInstance.scene.traverse(function(obj) {
        if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
            objFound = obj;
            if (runTime) {
                _pGlob.objCache[objName] = objFound;
            }
        }
    });
    return objFound;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc.filter(function(name) {
        return name;
    });
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}




// show and hide puzzles
function changeVis(objSelector, bool) {
    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        obj.visible = bool;
    }
}



// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}



// setActiveCamera puzzle
function setActiveCamera(camName) {
    var camera = getObjectByName(camName);
    if (!camera || !camera.isCamera || appInstance.getCamera() == camera)
        return;
    appInstance.setCamera(camera);
}



// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;
        elem.addEventListener(eventType, callback);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, eventType, callback]);
    }
}



// setCSSRuleStyle puzzle
function setCSSRuleStyle(prop, value, id, isParent, mediaRule) {
    var styles = (isParent) ? parent.document.styleSheets : document.styleSheets;
    for (var i = 0; i < styles.length; i++) {
        /**
         * workaround for "DOMException: Failed to read the 'cssRules' property
         * from 'CSSStyleSheet': Cannot access rules"
         */
        try { var cssRules = styles[i].cssRules; }
        catch (e) { continue; }

        for (var j = 0; j < cssRules.length; j++) {
            var cssRule = cssRules[j];
            if (!mediaRule && cssRule.selectorText == id)
                cssRule.style[prop] = value;
            else if (mediaRule && cssRule.media && cssRule.media.mediaText == mediaRule) {
                var cssRulesMedia = cssRule.cssRules;
                for (var k = 0; k < cssRulesMedia.length; k++) {
                    if (cssRulesMedia[k].selectorText == id)
                        cssRulesMedia[k].style[prop] = value;
                }
            }
        }
    }
}



// initFullscreen puzzle
function initFullscreen(id, isParent, cb_enter, cb_exit, cb_unavail) {
    var elem = getElement(id, isParent);
    if (!elem)
        return;
    var doc = isParent ? parent.document: document;
    if (!(doc.fullscreenEnabled ||
        doc.webkitFullscreenEnabled ||
        doc.mozFullScreenEnabled ||
        doc.msFullscreenEnabled)) {
            cb_unavail();
            return;
    }

    function fullscreenClickCb() {
        event.stopPropagation();
        if (doc.fullscreenElement ||
            doc.webkitFullscreenElement ||
            doc.mozFullScreenElement ||
            doc.msFullscreenElement) {
            exitFullscreen();
        } else {
            requestFullscreen(doc.body);
        }
    }
    elem.addEventListener('click', fullscreenClickCb);
    if (v3d.PL.editorEventListeners)
        v3d.PL.editorEventListeners.push([elem, 'click', fullscreenClickCb]);

    function changeFullscreen(event) {
        if (doc.fullscreenElement ||
            doc.webkitFullscreenElement ||
            doc.mozFullScreenElement ||
            doc.msFullscreenElement)
            cb_enter(event);
        else
            cb_exit(event);
    }
    doc.addEventListener('webkitfullscreenchange', changeFullscreen);
    doc.addEventListener('mozfullscreenchange', changeFullscreen);
    doc.addEventListener('msfullscreenchange', changeFullscreen);
    doc.addEventListener('fullscreenchange', changeFullscreen);
    if (v3d.PL.editorEventListeners) {
        v3d.PL.editorEventListeners.push([doc, 'webkitfullscreenchange', changeFullscreen]);
        v3d.PL.editorEventListeners.push([doc, 'mozfullscreenchange', changeFullscreen]);
        v3d.PL.editorEventListeners.push([doc, 'msfullscreenchange', changeFullscreen]);
        v3d.PL.editorEventListeners.push([doc, 'fullscreenchange', changeFullscreen]);
    }

    function requestFullscreen(fselem) {
        if (fselem.requestFullscreen)
            fselem.requestFullscreen();
        else if (fselem.mozRequestFullScreen)
            fselem.mozRequestFullScreen();
        else if (fselem.webkitRequestFullscreen)
            fselem.webkitRequestFullscreen();
        else if (fselem.msRequestFullscreen)
            fselem.msRequestFullscreen();
    }
    function exitFullscreen() {
        if (doc.exitFullscreen)
            doc.exitFullscreen();
        else if (doc.mozCancelFullScreen)
            doc.mozCancelFullScreen();
        else if (doc.webkitExitFullscreen)
            doc.webkitExitFullscreen();
        else if (doc.msExitFullscreen)
            doc.msExitFullscreen();
    }
}



function elfsquadGetValueByCode() {
    return (function(c) {
            if (!window['elfsquad.configuration']) return 0;

            for (let step of window['elfsquad.configuration'].steps){
                let stack = [...step.features];

                while(stack.length > 0){
                    let current = stack.pop();
                    if (current.code == c){ return current.value; }
                    for (let child of current.features){
                        stack.push(child);
                    }
                }
            }

            return 0;
        }).apply(null, arguments);
}



function setMorphFactor(objName, targetName, factor) {

    if (objName && targetName) {
        var obj = getObjectByName(objName);
        if (obj) {
            obj.resolveMultiMaterial().forEach(function(objR) {
                if (objR.morphTargetDictionary && targetName in objR.morphTargetDictionary) {
                    var idx = objR.morphTargetDictionary[targetName];
                    objR.morphTargetInfluences[idx] = Number(factor);
                }
            });

            // COMPAT: 3.7.0, only to keep 3.7.1 stable (not require engine update)
            if (obj.getAuxClippingMeshes)
                obj.getAuxClippingMeshes().forEach(function(objC) {
                    if (objC.morphTargetDictionary && targetName in objC.morphTargetDictionary) {
                        var idx = objC.morphTargetDictionary[targetName];
                        objC.morphTargetInfluences[idx] = Number(factor);
                    }
                });
        }
    }

}



function elfsquadGetValueByName() {
    return (function(name) {
            if (!window['elfsquad.configuration']) return 0;

            for (let step of window['elfsquad.configuration'].steps){
                let stack = [...step.features];

                while(stack.length > 0){
                    let current = stack.pop();
                    if (current.name == name) {
                        return current.value;
                     }
                    for (let child of current.features){
                        stack.push(child);
                    }
                }
            }

            return 0;
        }).apply(null, arguments);
}




/**
 * Retrieve coordinate system from the loaded scene
 */
function getCoordSystem() {
    var scene = appInstance.scene;

    if (scene && "v3d" in scene.userData && "coordSystem" in scene.userData.v3d) {
        return scene.userData.v3d.coordSystem;
    } else {
        // COMPAT: <2.17, consider replacing to 'Y_UP_RIGHT' for scenes with unknown origin
        return 'Z_UP_RIGHT';
    }
}


/**
 * Transform coordinates from one space to another
 * Can be used with Vector3 or Euler.
 */
function coordsTransform(coords, from, to, noSignChange) {

    if (from == to)
        return coords;

    var y = coords.y, z = coords.z;

    if (from == 'Z_UP_RIGHT' && to == 'Y_UP_RIGHT') {
        coords.y = z;
        coords.z = noSignChange ? y : -y;
    } else if (from == 'Y_UP_RIGHT' && to == 'Z_UP_RIGHT') {
        coords.y = noSignChange ? z : -z;
        coords.z = y;
    } else {
        console.error('coordsTransform: Unsupported coordinate space');
    }

    return coords;
}


/**
 * Verge3D euler rotation to Blender/Max shortest.
 * 1) Convert from intrinsic rotation (v3d) to extrinsic XYZ (Blender/Max default
 *    order) via reversion: XYZ -> ZYX
 * 2) swizzle ZYX->YZX
 * 3) choose the shortest rotation to resemble Blender's behavior
 */
var eulerV3DToBlenderShortest = function() {

    var eulerTmp = new v3d.Euler();
    var eulerTmp2 = new v3d.Euler();
    var vec3Tmp = new v3d.Vector3();

    return function(euler, dest) {

        var eulerBlender = eulerTmp.copy(euler).reorder('YZX');
        var eulerBlenderAlt = eulerTmp2.copy(eulerBlender).makeAlternative();

        var len = eulerBlender.toVector3(vec3Tmp).lengthSq();
        var lenAlt = eulerBlenderAlt.toVector3(vec3Tmp).lengthSq();

        dest.copy(len < lenAlt ? eulerBlender : eulerBlenderAlt);
        return coordsTransform(dest, 'Y_UP_RIGHT', 'Z_UP_RIGHT');
    }

}();




function RotationInterface() {
    /**
     * For user manipulations use XYZ extrinsic rotations (which
     * are the same as ZYX intrinsic rotations)
     *     - Blender/Max/Maya use extrinsic rotations in the UI
     *     - XYZ is the default option, but could be set from
     *       some order hint if exported
     */
    this._userRotation = new v3d.Euler(0, 0, 0, 'ZYX');
    this._actualRotation = new v3d.Euler();
}

Object.assign(RotationInterface, {
    initObject: function(obj) {
        if (obj.userData.v3d.puzzles === undefined) {
            obj.userData.v3d.puzzles = {}
        }
        if (obj.userData.v3d.puzzles.rotationInterface === undefined) {
            obj.userData.v3d.puzzles.rotationInterface = new RotationInterface();
        }

        var rotUI = obj.userData.v3d.puzzles.rotationInterface;
        rotUI.updateFromObject(obj);
        return rotUI;
    }
});

Object.assign(RotationInterface.prototype, {

    updateFromObject: function(obj) {
        var SYNC_ROT_EPS = 1e-8;

        if (!this._actualRotation.equalsEps(obj.rotation, SYNC_ROT_EPS)) {
            this._actualRotation.copy(obj.rotation);
            this._updateUserRotFromActualRot();
        }
    },

    getActualRotation: function(euler) {
        return euler.copy(this._actualRotation);
    },

    setUserRotation: function(euler) {
        // don't copy the order, since it's fixed to ZYX for now
        this._userRotation.set(euler.x, euler.y, euler.z);
        this._updateActualRotFromUserRot();
    },

    getUserRotation: function(euler) {
        return euler.copy(this._userRotation);
    },

    _updateUserRotFromActualRot: function() {
        var order = this._userRotation.order;
        this._userRotation.copy(this._actualRotation).reorder(order);
    },

    _updateActualRotFromUserRot: function() {
        var order = this._actualRotation.order;
        this._actualRotation.copy(this._userRotation).reorder(order);
    }

});




// setObjTransform puzzle
function setObjTransform(objSelector, isWorldSpace, mode, vector, offset){
    var x = vector[0];
      var y = vector[1];
      var z = vector[2];

    var objNames = retrieveObjectNames(objSelector);

    function setObjProp(obj, prop, val) {
        if (!offset) {
            obj[mode][prop] = val;
        } else {
            if (mode != "scale")
                obj[mode][prop] += val;
            else
                obj[mode][prop] *= val;
        }
    }

    var inputsUsed = _pGlob.vec3Tmp.set(Number(x !== ''), Number(y !== ''),
            Number(z !== ''));
    var coords = _pGlob.vec3Tmp2.set(x || 0, y || 0, z || 0);

    if (mode === 'rotation') {
        // rotations are specified in degrees
        coords.multiplyScalar(v3d.MathUtils.DEG2RAD);
    }

    var coordSystem = getCoordSystem();

    coordsTransform(inputsUsed, coordSystem, 'Y_UP_RIGHT', true);
    coordsTransform(coords, coordSystem, 'Y_UP_RIGHT', mode === 'scale');

    for (var i = 0; i < objNames.length; i++) {

        var objName = objNames[i];
        if (!objName) continue;

        var obj = getObjectByName(objName);
        if (!obj) continue;

        if (isWorldSpace && obj.parent) {
            obj.matrixWorld.decomposeE(obj.position, obj.rotation, obj.scale);

            if (inputsUsed.x) setObjProp(obj, "x", coords.x);
            if (inputsUsed.y) setObjProp(obj, "y", coords.y);
            if (inputsUsed.z) setObjProp(obj, "z", coords.z);

            obj.matrixWorld.composeE(obj.position, obj.rotation, obj.scale);
            obj.matrix.multiplyMatrices(_pGlob.mat4Tmp.copy(obj.parent.matrixWorld).invert(), obj.matrixWorld);
            obj.matrix.decompose(obj.position, obj.quaternion, obj.scale);

        } else if (mode === 'rotation' && coordSystem == 'Z_UP_RIGHT') {
            // Blender/Max coordinates

            // need all the rotations for order conversions, especially if some
            // inputs are not specified
            var euler = eulerV3DToBlenderShortest(obj.rotation, _pGlob.eulerTmp);
            coordsTransform(euler, coordSystem, 'Y_UP_RIGHT');

            if (inputsUsed.x) euler.x = offset ? euler.x + coords.x : coords.x;
            if (inputsUsed.y) euler.y = offset ? euler.y + coords.y : coords.y;
            if (inputsUsed.z) euler.z = offset ? euler.z + coords.z : coords.z;

            /**
             * convert from Blender/Max default XYZ extrinsic order to v3d XYZ
             * intrinsic with reversion (XYZ -> ZYX) and axes swizzling (ZYX -> YZX)
             */
            euler.order = "YZX";
            euler.reorder(obj.rotation.order);
            obj.rotation.copy(euler);

        } else if (mode === 'rotation' && coordSystem == 'Y_UP_RIGHT') {
            // Maya coordinates

            // Use separate rotation interface to fix ambiguous rotations for Maya,
            // might as well do the same for Blender/Max.

            var rotUI = RotationInterface.initObject(obj);
            var euler = rotUI.getUserRotation(_pGlob.eulerTmp);
            // TODO(ivan): this probably needs some reasonable wrapping
            if (inputsUsed.x) euler.x = offset ? euler.x + coords.x : coords.x;
            if (inputsUsed.y) euler.y = offset ? euler.y + coords.y : coords.y;
            if (inputsUsed.z) euler.z = offset ? euler.z + coords.z : coords.z;

            rotUI.setUserRotation(euler);
            rotUI.getActualRotation(obj.rotation);
        } else {
            if (inputsUsed.x) setObjProp(obj, "x", coords.x);
            if (inputsUsed.y) setObjProp(obj, "y", coords.y);
            if (inputsUsed.z) setObjProp(obj, "z", coords.z);

        }

        obj.updateMatrixWorld(true);
    }

}



function elfsquadOnConfigurationUpdate() {
    return (function(cb){
            window.parent.addEventListener('message', function(e){
                if (e.data && e.data.name == 'elfsquad.configurationUpdated'){
                    window['elfsquad.configuration'] = e.data.args;
                    cb();
                }
            });
        }).apply(null, arguments);
}



function elfsquadGetCurrentStep() {
    return (function(c) {
            if (!window['elfsquad.step']) return {};
            return window['elfsquad.step'];
        }).apply(null, arguments);
}



// dictGet puzzle
function dictGet(dict, key) {
    if (dict && typeof dict == 'object')
        return dict[key];
}



function elfsquadOnStepChanged() {
    return (function(cb){
            window.parent.addEventListener('message', function(e){
                if (e.data && e.data.name == 'elfsquad.stepChanged'){
                    window['elfsquad.step'] = e.data.args;
                    cb();
                }
            });
        }).apply(null, arguments);
}



function intersectPlaneCSS(plane, cssX, cssY, dest) {
    var coords = _pGlob.vec2Tmp;
    var rc = _pGlob.raycasterTmp;
    coords.x = (cssX / appInstance.getWidth()) * 2 - 1;
    coords.y = - (cssY / appInstance.getHeight()) * 2 + 1;
    rc.setFromCamera(coords, appInstance.getCamera(true));
    return rc.ray.intersectPlane(plane, dest);
}



// dragMove puzzle
_pGlob.dragMoveOrigins = {};

function dragMove(objSelector, mode, blockId, parentDragOverBlockId) {
    var camera = appInstance.getCamera();
    if (!camera)
        return;

    if (!_pGlob.objDragOverInfoByBlock)
        return;

    var objNames = retrieveObjectNames(objSelector);

    var info = _pGlob.objDragOverInfoByBlock[parentDragOverBlockId];
    if (!info) return;

    var draggedObj = getObjectByName(info.draggedObjName);
    if (!draggedObj) return;

    if (!(blockId in _pGlob.dragMoveOrigins)) {
        _pGlob.dragMoveOrigins[blockId] = [];
    }
    var posOrigins = _pGlob.dragMoveOrigins[blockId];
    var lenDiff = objNames.length - posOrigins.length;
    for (var i = 0; i < lenDiff; i++) {
        posOrigins.push(new v3d.Vector3());
    }

    for (var i = 0; i < objNames.length; i++) {
        var obj = getObjectByName(objNames[i]);
        if (!obj) {
            continue;
        }

        var posOrigin = posOrigins[i];

        if (!info.isMoved) {
            // the object position before the first move is used as an initial value
            posOrigin.copy(obj.position);
        }

        var coordSystem = getCoordSystem();

        if (mode == "X" || mode == "Y" || mode == "Z") {

            if (coordSystem == 'Z_UP_RIGHT') {
                var axis = mode == "X" ? _pGlob.AXIS_X : (mode == "Y" ? _pGlob.AXIS_Z : _pGlob.AXIS_Y);
                var coord = mode == "X" ? "x" : (mode == "Y" ? "z" : "y");
            } else {
                var axis = mode == "X" ? _pGlob.AXIS_X : (mode == "Y" ? _pGlob.AXIS_Y : _pGlob.AXIS_Z);
                var coord = mode == "X" ? "x" : (mode == "Y" ? "y" : "z");
            }

            var planeNor = camera.getWorldDirection(_pGlob.vec3Tmp);
            planeNor.cross(axis).cross(axis);
            var plane = _pGlob.planeTmp.setFromNormalAndCoplanarPoint(planeNor, draggedObj.position);

            var p0 = intersectPlaneCSS(plane, info.downX, info.downY, _pGlob.vec3Tmp);
            var p1 = intersectPlaneCSS(plane, info.currX, info.currY, _pGlob.vec3Tmp2);
            if (p0 && p1) {
                obj.position[coord] = posOrigin[coord] + p1[coord] - p0[coord];
            }
        } else if (mode == "XY" || mode == "XZ" || mode == "YZ") {
            if (coordSystem == 'Z_UP_RIGHT') {
                var normal = mode == "XY" ? _pGlob.AXIS_Y : (mode == "XZ" ? _pGlob.AXIS_Z : _pGlob.AXIS_X);
                var coord0 = mode == "XY" ? "x" : (mode == "XZ" ? "x" : "y");
                var coord1 = mode == "XY" ? "z" : (mode == "XZ" ? "y" : "z");
            } else {
                var normal = mode == "XY" ? _pGlob.AXIS_Z : (mode == "XZ" ? _pGlob.AXIS_Y : _pGlob.AXIS_X);
                var coord0 = mode == "XY" ? "x" : (mode == "XZ" ? "x" : "y");
                var coord1 = mode == "XY" ? "y" : (mode == "XZ" ? "z" : "z");
            }

            var plane = _pGlob.planeTmp.setFromNormalAndCoplanarPoint(normal, draggedObj.position);

            var p0 = intersectPlaneCSS(plane, info.downX, info.downY, _pGlob.vec3Tmp);
            var p1 = intersectPlaneCSS(plane, info.currX, info.currY, _pGlob.vec3Tmp2);
            if (p0 && p1) {
                obj.position[coord0] = posOrigin[coord0] + p1[coord0] - p0[coord0];
                obj.position[coord1] = posOrigin[coord1] + p1[coord1] - p0[coord1];
            }
        } else if (mode == "XYZ") {
            var planeNor = camera.getWorldDirection(_pGlob.vec3Tmp);
            var plane = _pGlob.planeTmp.setFromNormalAndCoplanarPoint(planeNor, draggedObj.position);

            var p0 = intersectPlaneCSS(plane, info.downX, info.downY, _pGlob.vec3Tmp);
            var p1 = intersectPlaneCSS(plane, info.currX, info.currY, _pGlob.vec3Tmp2);
            if (p0 && p1) {
                obj.position.addVectors(posOrigin, p1).sub(p0);
            }
        }
        obj.updateMatrixWorld(true);
    }
}



// utility function used by the whenClicked, whenHovered and whenDraggedOver puzzles
function initObjectPicking(callback, eventType, mouseDownUseTouchStart, mouseButtons) {

    var elem = appInstance.renderer.domElement;
    elem.addEventListener(eventType, pickListener);
    if (v3d.PL.editorEventListeners)
        v3d.PL.editorEventListeners.push([elem, eventType, pickListener]);

    if (eventType == 'mousedown') {

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        elem.addEventListener(touchEventName, pickListener);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, touchEventName, pickListener]);

    } else if (eventType == 'dblclick') {

        var prevTapTime = 0;

        function doubleTapCallback(event) {

            var now = new Date().getTime();
            var timesince = now - prevTapTime;

            if (timesince < 600 && timesince > 0) {

                pickListener(event);
                prevTapTime = 0;
                return;

            }

            prevTapTime = new Date().getTime();
        }

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        elem.addEventListener(touchEventName, doubleTapCallback);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, touchEventName, doubleTapCallback]);
    }

    var raycaster = new v3d.Raycaster();

    function pickListener(event) {

        // to handle unload in loadScene puzzle
        if (!appInstance.getCamera())
            return;

        event.preventDefault();

        var xNorm = 0, yNorm = 0;
        if (event instanceof MouseEvent) {
            if (mouseButtons && mouseButtons.indexOf(event.button) == -1)
                return;
            xNorm = event.offsetX / elem.clientWidth;
            yNorm = event.offsetY / elem.clientHeight;
        } else if (event instanceof TouchEvent) {
            var rect = elem.getBoundingClientRect();
            xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
            yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
        }

        _pGlob.screenCoords.x = xNorm * 2 - 1;
        _pGlob.screenCoords.y = -yNorm * 2 + 1;
        raycaster.setFromCamera(_pGlob.screenCoords, appInstance.getCamera(true));
        var objList = [];
        appInstance.scene.traverse(function(obj){objList.push(obj);});
        var intersects = raycaster.intersectObjects(objList);
        callback(intersects, event);
    }
}

function objectsIncludeObj(objNames, testedObjName) {
    if (!testedObjName) return false;

    for (var i = 0; i < objNames.length; i++) {
        if (testedObjName == objNames[i]) {
            return true;
        } else {
            // also check children which are auto-generated for multi-material objects
            var obj = getObjectByName(objNames[i]);
            if (obj && obj.type == "Group") {
                for (var j = 0; j < obj.children.length; j++) {
                    if (testedObjName == obj.children[j].name) {
                        return true;
                    }
                }
            }
        }
    }
    return false;
}

// utility function used by the whenClicked, whenHovered, whenDraggedOver, and raycast puzzles
function getPickedObjectName(obj) {
    // auto-generated from a multi-material object, use parent name instead
    if (obj.isMesh && obj.isMaterialGeneratedMesh && obj.parent) {
        return obj.parent.name;
    } else {
        return obj.name;
    }
}



function eventGetOffsetCoords(e, touchId, dest) {
    if (e instanceof MouseEvent) {
        dest.set(e.offsetX, e.offsetY);
    } else if (window.TouchEvent && e instanceof TouchEvent) {
        var rect = e.target.getBoundingClientRect();
        var touches = e.touches;
        if (e.type == "touchstart" || e.type == "touchend" || e.type == "touchmove") {
            touches = e.changedTouches;
        }

        var touch = touches[0];
        for (var i = 0; i < touches.length; i++) {
            if (touches[i].identifier == touchId) {
                touch = touches[i];
                break;
            }
        }

        dest.set(touch.clientX - rect.left, touch.clientY - rect.top);
    }
    return dest;
}



function eventTouchIdGetFirst(e) {
    if (e instanceof MouseEvent) {
        return -1;
    } else if (window.TouchEvent && e instanceof TouchEvent) {
        if (e.type == "touchstart" || e.type == "touchend" || e.type == "touchmove") {
            return e.changedTouches[0].identifier;
        } else {
            return e.touches[0].identifier;
        }
    }
    return -1;
}



/**
 * For "touchstart", "touchend" and "touchmove" events returns true if a touch
 * object with the provided touch id is in the changedTouches array, otherwise
 * - false. For other events returns true.
 */
function eventTouchIdChangedFilter(e, touchId) {
    if (window.TouchEvent && e instanceof TouchEvent) {
        if (e.type == "touchstart" || e.type == "touchend" || e.type == "touchmove") {
            var isChanged = false;
            for (var i = 0; i < e.changedTouches.length; i++) {
                if (e.changedTouches[i].identifier == touchId) {
                    isChanged = true;
                    break;
                }
            }
            return isChanged;
        }
    }

    return true;
}



function initDragOverInfo() {
    return {
        draggedObjName: '',
        downX: 0, downY: 0,
        prevX: 0, prevY: 0,
        currX: 0, currY: 0,
        isDowned: false,
        isMoved: false,
        touchId: -1
    };
}



// whenDraggedOver puzzle
_pGlob.objDragOverInfoGlobal = [];
_pGlob.objDragOverInfoByBlock = {}

initObjectPicking(function(intersects, downEvent) {

    _pGlob.objDragOverInfoGlobal.forEach(function(el) {

        if (downEvent instanceof MouseEvent)
            if (el.mouseButtons.indexOf(downEvent.button) == -1)
                return;

        var maxIntersects = el.xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);

            if (objectsIncludeObj([el.objName], objName)) {
                el.callback({ downEvent: downEvent, draggedObjName: objName });
            }

        }

    });

}, 'mousedown', true);



// whenDraggedOver puzzle
function registerOnDrag(objSelector, xRay, mouseButtons, cbStart, cbMove, cbDrop, blockId) {

    var cb = function(cbParam) {

        if (appInstance.controls) {
            appInstance.controls.enabled = false;
        }

        if (!(blockId in _pGlob.objDragOverInfoByBlock)) {
            _pGlob.objDragOverInfoByBlock[blockId] = initDragOverInfo();
        }
        var info = _pGlob.objDragOverInfoByBlock[blockId];

        // NOTE: don't use more than one pointing event, e.g. don't process
        // some events related to multitouch actions
        if (info.isDowned) {
            return;
        }

        var touchId = eventTouchIdGetFirst(cbParam.downEvent);
        var coords = eventGetOffsetCoords(cbParam.downEvent, touchId,
                _pGlob.vec2Tmp);

        info.downX = info.prevX = info.currX = coords.x;
        info.downY = info.prevY = info.currY = coords.y;
        info.touchId = touchId;
        info.isDowned = true;
        info.isMoved = false;
        info.draggedObjName = cbParam.draggedObjName;

        cbStart(cbParam.downEvent);

        var elem = appInstance.container;

        var moveCb = function(e) {
            if (!eventTouchIdChangedFilter(e, info.touchId)) {
                // don't handle events not intended for this particular touch
                return;
            }

            var coords = eventGetOffsetCoords(e, info.touchId, _pGlob.vec2Tmp);
            info.prevX = info.currX;
            info.prevY = info.currY;
            info.currX = coords.x;
            info.currY = coords.y;
            cbMove(e);
            info.isMoved = true;
        }
        var upCb = function(e) {
            if (!eventTouchIdChangedFilter(e, info.touchId)) {
                // don't handle events not intended for this particular touch
                return;
            }

            var coords = eventGetOffsetCoords(e, info.touchId, _pGlob.vec2Tmp);
            info.currX = coords.x;
            info.currY = coords.y;
            info.prevX = info.currX;
            info.prevY = info.currY;
            cbDrop(e);
            info.isDowned = false;

            elem.removeEventListener('mousemove', moveCb);
            elem.removeEventListener('touchmove', moveCb);
            elem.removeEventListener('mouseup', upCb);
            elem.removeEventListener('touchend', upCb);
            if (appInstance.controls) {
                appInstance.controls.enabled = true;
            }
        }

        elem.addEventListener('mousemove', moveCb);
        elem.addEventListener('touchmove', moveCb);
        elem.addEventListener('mouseup', upCb);
        elem.addEventListener('touchend', upCb);
    }

    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        _pGlob.objDragOverInfoGlobal.push({
            objName: objName,
            callback: cb,
            xRay: xRay,
            mouseButtons: mouseButtons
        });
    }
}



// getObjTransform puzzle
function getObjTransform(objName, isWorldSpace, mode, coord) {
    if (!objName)
        return;
    var obj = getObjectByName(objName);
    if (!obj)
        return;

    var coordSystem = getCoordSystem();

    var transformVal;

    if (isWorldSpace && obj.parent) {
        if (mode === 'position') {
            transformVal = coordsTransform(obj.getWorldPosition(_pGlob.vec3Tmp), 'Y_UP_RIGHT',
                coordSystem, mode === 'scale');
        } else if (mode === 'rotation') {
            transformVal = coordsTransform(obj.getWorldEuler(_pGlob.eulerTmp, 'XYZ'), 'Y_UP_RIGHT',
                coordSystem, mode === 'scale');
        } else if (mode === 'scale') {
            transformVal = coordsTransform(obj.getWorldScale(_pGlob.vec3Tmp), 'Y_UP_RIGHT',
                coordSystem, mode === 'scale');
        }

    } else if (mode === 'rotation' && coordSystem == 'Z_UP_RIGHT') {
        transformVal = eulerV3DToBlenderShortest(obj.rotation,
                _pGlob.eulerTmp);

    } else if (mode === 'rotation' && coordSystem == 'Y_UP_RIGHT') {
        // Maya coordinates
        // Use separate rotation interface to fix ambiguous rotations for Maya,
        // might as well do the same for Blender/Max.

        var rotUI = RotationInterface.initObject(obj);
        transformVal = rotUI.getUserRotation(_pGlob.eulerTmp);

    } else {
        transformVal = coordsTransform(obj[mode].clone(), 'Y_UP_RIGHT',
                coordSystem, mode === 'scale');
    }

    if (mode === 'rotation') {
        transformVal.x = v3d.MathUtils.radToDeg(transformVal.x);
        transformVal.y = v3d.MathUtils.radToDeg(transformVal.y);
        transformVal.z = v3d.MathUtils.radToDeg(transformVal.z);
    }

    if (coord == 'xyz') {
        // remove order component for Euler vectors
        return transformVal.toArray().slice(0, 3);
    } else {
        return transformVal[coord];
    }
}



function elfsquadUpdateRequirementByCode() {
    return (function(featureCode, value) {
            const configuration =  window['elfsquad.configuration'];
            if (!configuration) return;

            let nodeId = null;
            let stack = [...configuration.steps];
            while(stack.length > 0){
                let current = stack.pop();
                if (current.code == featureCode){
                    nodeId = current.id;
                    break;
                }
                for (let child of current.features){
                    stack.push(child);
                }
            }

            console.log('elfsquadUpdateRequirementByCode', nodeId);

            if (nodeId) {
                window.top.postMessage({
                    name: 'elfsquad.updateRequirement',
                    args: {
                        nodeId: nodeId,
                        value: parseFloat(value),
                        isSelection: false
                    }
                }, '*');
            }
        }).apply(null, arguments);
}



// toFixedPoint puzzle
function toFixedPoint(num, prec) {
    prec = Math.pow(10, prec);
    return Math.round(num * prec)/prec;
}



// objConstraintAddLimit puzzle
function objConstraintAddLimit(constraintName, objSelector, mode, min, max, targetObjName, dist, distLimitMode) {
    var objNames;
    if (mode == 'DISTANCE') {
        if (!targetObjName) return;
        var targetObj = getObjectByName(targetObjName);
        if (!targetObj) return;
    }

    objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName) continue;

        var obj = getObjectByName(objName);
        if (!obj || !obj.constraints) continue;

        for (var j = obj.constraints.length - 1; j >= 0; j--) {
            if (obj.constraints[j].name == constraintName) {
                obj.constraints.splice(j, 1);
            }
        }

        var coordSystem = getCoordSystem();

        switch (mode) {
            case 'POS_X':
            case 'POS_Y':
            case 'POS_Z':
                var cons = new v3d.LimitLocationConstraint();
                cons.name = constraintName;

                if (coordSystem == 'Z_UP_RIGHT')
                    var compIndex = mode == 'POS_X' ? 0 : (mode == 'POS_Y' ? 2 : 1);
                else
                    var compIndex = mode == 'POS_X' ? 0 : (mode == 'POS_Y' ? 1 : 2);

                // swizzle sign and limits order
                if (coordSystem == 'Z_UP_RIGHT' && mode == 'POS_Y') {
                    cons.min.setComponent(compIndex, -max);
                    cons.max.setComponent(compIndex, -min);
                } else {
                    cons.min.setComponent(compIndex, min);
                    cons.max.setComponent(compIndex, max);
                }
                obj.constraints.push(cons);
                break;

            case 'ROT_X':
            case 'ROT_Y':
            case 'ROT_Z':
                var cons = new v3d.LimitRotationConstraint();
                cons.name = constraintName;

                if (coordSystem == 'Z_UP_RIGHT')
                    cons.axis = mode == 'ROT_X' ? 'X' : (mode == 'ROT_Y' ? 'Z' : 'Y');
                else
                    cons.axis = mode == 'ROT_X' ? 'X' : (mode == 'ROT_Y' ? 'Y' : 'Z');

                // swizzle sign and limits order
                if (coordSystem == 'Z_UP_RIGHT' && mode == 'ROT_Y') {
                    cons.min = v3d.MathUtils.degToRad(-max);
                    cons.max = v3d.MathUtils.degToRad(-min);
                } else {
                    cons.min = v3d.MathUtils.degToRad(min);
                    cons.max = v3d.MathUtils.degToRad(max);
                }

                obj.constraints.push(cons);
                break;

            case 'SCALE_X':
            case 'SCALE_Y':
            case 'SCALE_Z':
                var cons = new v3d.LimitScaleConstraint();
                cons.name = constraintName;

                if (coordSystem == 'Z_UP_RIGHT')
                    var compIndex = mode == 'SCALE_X' ? 0 : (mode == 'SCALE_Y' ? 2 : 1);
                else
                    var compIndex = mode == 'SCALE_X' ? 0 : (mode == 'SCALE_Y' ? 1 : 2);

                cons.min.setComponent(compIndex, min);
                cons.max.setComponent(compIndex, max);
                obj.constraints.push(cons);
                break;

            case 'DISTANCE':
                var cons =  new v3d.LimitDistanceConstraint(targetObj);
                cons.name = constraintName;
                cons.distance = dist;
                cons.limitMode = distLimitMode;
                obj.constraints.push(cons);
                break;
        }
    }
}


// Describe this function...
function updateHeight() {
  setMorphFactor('mechanism_part', 'move_top', (getObjTransform('mechanism_slider_height', false, 'position', 'z') - 0.38) * 2);
  setObjTransform(['mechanism_slider_width_right', 'mechanism_slider_width_left', 'mechanism_slider_depth_left', 'mechanism_slider_depth_right'], false, 'position', ['', '', (toFixedPoint(getObjTransform('mechanism_slider_height', false, 'position', 'z'), 3) - 0.38) / 2], false);
  objConstraintAddLimit('Limit Location', 'hole_controller_right', 'POS_Z', -0.25 - (getObjTransform('mechanism_slider_height', false, 'position', 'z') - 0.38), 0.25, '', 0, 'LIMITDIST_ONSURFACE');
  objConstraintAddLimit('Limit Location', 'hole_controller_left', 'POS_Z', -0.25 - (getObjTransform('mechanism_slider_height', false, 'position', 'z') - 0.38), 0.25, '', 0, 'LIMITDIST_ONSURFACE');
  setMorphFactor('mechanism_part', 'move_holes', (getObjTransform('hole_controller_right', false, 'position', 'z') - 0.25) * -2);
}


function matGetValues(matName) {

    var mat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
    if (!mat)
        return [];

    if (mat.isMeshNodeMaterial)
        return Object.keys(mat.nodeValueMap);
    else if (mat.isMeshStandardMaterial)
        return ['metalness', 'roughness', 'bumpScale', 'emissiveIntensity', 'envMapIntensity'];
    else
        return [];
}



// setMaterialValue puzzle
function setMaterialValue(matName, valName, value) {

    var values = matGetValues(matName);
    if (values.indexOf(valName) < 0)
        return;

    var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);

    for (var i = 0; i < mats.length; i++) {
        var mat = mats[i];

        if (mat.isMeshNodeMaterial) {
            var valIdx = mat.nodeValueMap[valName];
            mat.nodeValue[valIdx] = Number(value);
        } else
            mat[valName] = Number(value);

        if (appInstance.scene !== null) {
            if (mat === appInstance.scene.worldMaterial) {
                appInstance.updateEnvironment(mat);
            }
        }
    }
}



function getMorphFactor(objName, targetName) {

    if (objName && targetName) {
        var obj = getObjectByName(objName);

        if (obj) {
            obj = obj.resolveMultiMaterial()[0];
            if (obj.morphTargetDictionary && targetName in obj.morphTargetDictionary) {
                var idx = obj.morphTargetDictionary[targetName];
                return obj.morphTargetInfluences[idx];
            }
        }
    }

    return 0;
}



// Copyright (c) 2010-2019 Tween.js authors.
// Easing equations Copyright (c) 2001 Robert Penner http://robertpenner.com/easing/
// Code copied from https://cdnjs.cloudflare.com/ajax/libs/tween.js/17.3.0/Tween.min.js

var _Group=function(){this._tweens={},this._tweensAddedDuringUpdate={}};_Group.prototype={getAll:function(){return Object.keys(this._tweens).map(function(t){return this._tweens[t]}.bind(this))},removeAll:function(){this._tweens={}},add:function(t){this._tweens[t.getId()]=t,this._tweensAddedDuringUpdate[t.getId()]=t},remove:function(t){delete this._tweens[t.getId()],delete this._tweensAddedDuringUpdate[t.getId()]},update:function(t,n){var e=Object.keys(this._tweens);
if(0===e.length)return!1;for(t=void 0!==t?t:TWEEN.now();0<e.length;){this._tweensAddedDuringUpdate={};for(var i=0;i<e.length;i++){var r=this._tweens[e[i]];r&&!1===r.update(t)&&(r._isPlaying=!1,n||delete this._tweens[e[i]])}e=Object.keys(this._tweensAddedDuringUpdate)}return!0}};var TWEEN=new _Group;TWEEN.Group=_Group,TWEEN._nextId=0,TWEEN.nextId=function(){return TWEEN._nextId++},"undefined"==typeof window&&"undefined"!=typeof process&&process.hrtime?TWEEN.now=function(){var t=process.hrtime();
return 1e3*t[0]+t[1]/1e6}:"undefined"!=typeof window&&void 0!==window.performance&&void 0!==window.performance.now?TWEEN.now=window.performance.now.bind(window.performance):void 0!==Date.now?TWEEN.now=Date.now:TWEEN.now=function(){return(new Date).getTime()},TWEEN.Tween=function(t,n){this._object=t,this._valuesStart={},this._valuesEnd={},this._valuesStartRepeat={},this._duration=1e3,this._repeat=0,this._repeatDelayTime=void 0,this._yoyo=!1,this._isPlaying=!1,this._reversed=!1,this._delayTime=0,
this._startTime=null,this._easingFunction=TWEEN.Easing.Linear.None,this._interpolationFunction=TWEEN.Interpolation.Linear,this._chainedTweens=[],this._onStartCallback=null,this._onStartCallbackFired=!1,this._onUpdateCallback=null,this._onCompleteCallback=null,this._onStopCallback=null,this._group=n||TWEEN,this._id=TWEEN.nextId()},TWEEN.Tween.prototype={getId:function(){return this._id},isPlaying:function(){return this._isPlaying},to:function(t,n){return this._valuesEnd=t,void 0!==n&&(this._duration=n),this},start:function(t){for(var n in this._group.add(this),this._isPlaying=!0,this._onStartCallbackFired=!1,this._startTime=void 0!==t?"string"==typeof t?TWEEN.now()+parseFloat(t):t:TWEEN.now(),this._startTime+=this._delayTime,this._valuesEnd){if(this._valuesEnd[n]instanceof Array){if(0===this._valuesEnd[n].length)continue;
this._valuesEnd[n]=[this._object[n]].concat(this._valuesEnd[n])}void 0!==this._object[n]&&(this._valuesStart[n]=this._object[n],this._valuesStart[n]instanceof Array==!1&&(this._valuesStart[n]*=1),this._valuesStartRepeat[n]=this._valuesStart[n]||0)}return this},stop:function(){return this._isPlaying&&(this._group.remove(this),this._isPlaying=!1,null!==this._onStopCallback&&this._onStopCallback(this._object),this.stopChainedTweens()),this},end:function(){return this.update(this._startTime+this._duration),this},stopChainedTweens:function(){for(var t=0,n=this._chainedTweens.length;t<n;
t++)this._chainedTweens[t].stop()},group:function(t){return this._group=t,this},delay:function(t){return this._delayTime=t,this},repeat:function(t){return this._repeat=t,this},repeatDelay:function(t){return this._repeatDelayTime=t,this},yoyo:function(t){return this._yoyo=t,this},easing:function(t){return this._easingFunction=t,this},interpolation:function(t){return this._interpolationFunction=t,this},chain:function(){return this._chainedTweens=arguments,this},onStart:function(t){return this._onStartCallback=t,this},onUpdate:function(t){return this._onUpdateCallback=t,this},onComplete:function(t){return this._onCompleteCallback=t,this},onStop:function(t){return this._onStopCallback=t,this},update:function(t){var n,e,i;if(t<this._startTime)return!0;
for(n in!1===this._onStartCallbackFired&&(null!==this._onStartCallback&&this._onStartCallback(this._object),this._onStartCallbackFired=!0),e=(t-this._startTime)/this._duration,e=0===this._duration||1<e?1:e,i=this._easingFunction(e),this._valuesEnd)if(void 0!==this._valuesStart[n]){var r=this._valuesStart[n]||0,a=this._valuesEnd[n];a instanceof Array?this._object[n]=this._interpolationFunction(a,i):("string"==typeof a&&(a="+"===a.charAt(0)||"-"===a.charAt(0)?r+parseFloat(a):parseFloat(a)),"number"==typeof a&&(this._object[n]=r+(a-r)*i))}if(null!==this._onUpdateCallback&&this._onUpdateCallback(this._object),1!==e)return!0;
if(0<this._repeat){for(n in isFinite(this._repeat)&&this._repeat--,this._valuesStartRepeat){if("string"==typeof this._valuesEnd[n]&&(this._valuesStartRepeat[n]=this._valuesStartRepeat[n]+parseFloat(this._valuesEnd[n])),this._yoyo){var s=this._valuesStartRepeat[n];this._valuesStartRepeat[n]=this._valuesEnd[n],this._valuesEnd[n]=s}this._valuesStart[n]=this._valuesStartRepeat[n]}return this._yoyo&&(this._reversed=!this._reversed),void 0!==this._repeatDelayTime?this._startTime=t+this._repeatDelayTime:this._startTime=t+this._delayTime,!0}null!==this._onCompleteCallback&&this._onCompleteCallback(this._object);for(var o=0,u=this._chainedTweens.length;o<u;o++)this._chainedTweens[o].start(this._startTime+this._duration);
return!1}},TWEEN.Easing={Linear:{None:function(t){return t}},Quadratic:{In:function(t){return t*t},Out:function(t){return t*(2-t)},InOut:function(t){return(t*=2)<1?.5*t*t:-.5*(--t*(t-2)-1)}},Cubic:{In:function(t){return t*t*t},Out:function(t){return--t*t*t+1},InOut:function(t){return(t*=2)<1?.5*t*t*t:.5*((t-=2)*t*t+2)}},Quartic:{In:function(t){return t*t*t*t},Out:function(t){return 1- --t*t*t*t},InOut:function(t){return(t*=2)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2)}},Quintic:{In:function(t){return t*t*t*t*t},Out:function(t){return--t*t*t*t*t+1},InOut:function(t){return(t*=2)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2)}},Sinusoidal:{In:function(t){return 1-Math.cos(t*Math.PI/2)},Out:function(t){return Math.sin(t*Math.PI/2)},InOut:function(t){return.5*(1-Math.cos(Math.PI*t))}},Exponential:{In:function(t){return 0===t?0:Math.pow(1024,t-1)},Out:function(t){return 1===t?1:1-Math.pow(2,-10*t)},
InOut:function(t){return 0===t?0:1===t?1:(t*=2)<1?.5*Math.pow(1024,t-1):.5*(2-Math.pow(2,-10*(t-1)))}},Circular:{In:function(t){return 1-Math.sqrt(1-t*t)},Out:function(t){return Math.sqrt(1- --t*t)},InOut:function(t){return(t*=2)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)}},Elastic:{In:function(t){return 0===t?0:1===t?1:-Math.pow(2,10*(t-1))*Math.sin(5*(t-1.1)*Math.PI)},Out:function(t){return 0===t?0:1===t?1:Math.pow(2,-10*t)*Math.sin(5*(t-.1)*Math.PI)+1},InOut:function(t){return 0===t?0:1===t?1:(t*=2)<1?-.5*Math.pow(2,10*(t-1))*Math.sin(5*(t-1.1)*Math.PI):.5*Math.pow(2,-10*(t-1))*Math.sin(5*(t-1.1)*Math.PI)+1}},Back:{In:function(t){return t*t*(2.70158*t-1.70158)},Out:function(t){return--t*t*(2.70158*t+1.70158)+1},InOut:function(t){var n=2.5949095;
return(t*=2)<1?t*t*((n+1)*t-n)*.5:.5*((t-=2)*t*((n+1)*t+n)+2)}},Bounce:{In:function(t){return 1-TWEEN.Easing.Bounce.Out(1-t)},Out:function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375},InOut:function(t){return t<.5?.5*TWEEN.Easing.Bounce.In(2*t):.5*TWEEN.Easing.Bounce.Out(2*t-1)+.5}}},TWEEN.Interpolation={Linear:function(t,n){var e=t.length-1,i=e*n,r=Math.floor(i),a=TWEEN.Interpolation.Utils.Linear;return n<0?a(t[0],t[1],i):1<n?a(t[e],t[e-1],e-i):a(t[r],t[e<r+1?e:r+1],i-r)},Bezier:function(t,n){for(var e=0,i=t.length-1,r=Math.pow,a=TWEEN.Interpolation.Utils.Bernstein,s=0;s<=i;s++)e+=r(1-n,i-s)*r(n,s)*t[s]*a(i,s);return e},CatmullRom:function(t,n){var e=t.length-1,i=e*n,r=Math.floor(i),a=TWEEN.Interpolation.Utils.CatmullRom;
return t[0]===t[e]?(n<0&&(r=Math.floor(i=e*(1+n))),a(t[(r-1+e)%e],t[r],t[(r+1)%e],t[(r+2)%e],i-r)):n<0?t[0]-(a(t[0],t[0],t[1],t[1],-i)-t[0]):1<n?t[e]-(a(t[e],t[e],t[e-1],t[e-1],i-e)-t[e]):a(t[r?r-1:0],t[r],t[e<r+1?e:r+1],t[e<r+2?e:r+2],i-r)},Utils:{Linear:function(t,n,e){return(n-t)*e+t},Bernstein:function(t,n){var e=TWEEN.Interpolation.Utils.Factorial;return e(t)/e(n)/e(t-n)},Factorial:function(){var i=[1];return function(t){var n=1;if(i[t])return i[t];for(var e=t;1<e;e--)n*=e;return i[t]=n}}(),CatmullRom:function(t,n,e,i,r){var a=.5*(e-t),s=.5*(i-n),o=r*r;return(2*n-2*e+a+s)*(r*o)+(-3*n+3*e-2*a-s)*o+a*r+n}}},function(t){"function"==typeof define&&define.amd?define([],function(){return TWEEN}):"undefined"!=typeof module&&"object"==typeof exports?module.exports=TWEEN:void 0!==t&&(t.TWEEN=TWEEN)}(this);



// animateParam puzzle
function tweenUpdateCb() {
    TWEEN.update();
}
appInstance.renderCallbacks.push(tweenUpdateCb);
if (v3d.PL.editorRenderCallbacks)
    v3d.PL.editorRenderCallbacks.push([appInstance, tweenUpdateCb]);



// animateParam puzzle
_pGlob.animateParamUpdate = 0;

function animateParam(from, to, duration, easing, easing2, repeat, yoyo, on_update, when_finished) {

    var mode = easing == "Linear" ?
        TWEEN.Easing.Linear.None : TWEEN.Easing[easing][easing2];

    var tweenObject = (typeof from != "number");

    if (!tweenObject) { // number
        from = [from];
        to = [to];
    }

    var tween = new TWEEN.Tween(from)
                    .to(to, duration * 1000)
                    .easing(mode)
                    .repeat(repeat)
                    .yoyo(yoyo)
                    .onUpdate(function (object) {
                        if (tweenObject)
                            _pGlob.animateParamUpdate = object;
                        else // number
                            _pGlob.animateParamUpdate = object[0];
                        on_update();
                    })
                    .onComplete(function (object) {
                        when_finished();
                    })
                    .start();
}



changeVis([['GROUP', 'jewelry'], ['GROUP', 'shelf']], false);
changeVis(['GROUP', 'mechanism_part'], true);
setHTMLElemStyle('display', 'none', ['models_desk', 'shelf_panel', 'ring_panel'], true);
setHTMLElemStyle('display', 'block', 'mech_part_panel', true);
setActiveCamera('mech_camera');

eventHTMLElem('click', ['models_mech', 'button_desk_1'], true, function(event) {
  changeVis([['GROUP', 'jewelry'], ['GROUP', 'shelf']], false);
  changeVis(['GROUP', 'mechanism_part'], true);
  setHTMLElemStyle('display', 'none', ['models_desk', 'shelf_panel', 'ring_panel'], true);
  setHTMLElemStyle('display', 'block', 'mech_part_panel', true);
  setActiveCamera('mech_camera');
});
eventHTMLElem('click', ['models_shelf', 'button_desk_2'], true, function(event) {
  changeVis([['GROUP', 'jewelry'], ['GROUP', 'mechanism_part']], false);
  changeVis(['GROUP', 'shelf'], true);
  if (horizontal_shelf == true) {
    changeVis('horizontal_shelf', true);
  } else {
    changeVis('horizontal_shelf', false);
  }
  setHTMLElemStyle('display', 'none', ['models_desk', 'mech_part_panel', 'ring_panel'], true);
  setHTMLElemStyle('display', 'block', 'shelf_panel', true);
  setActiveCamera('shelf_camera');
});
eventHTMLElem('click', ['models_ring', 'button_desk_3'], true, function(event) {
  changeVis([['GROUP', 'mechanism_part'], ['GROUP', 'shelf'], null], false);
  changeVis(['GROUP', 'jewelry'], true);
  setHTMLElemStyle('display', 'none', ['models_desk', 'shelf_panel', 'mech_part_panel'], true);
  setHTMLElemStyle('display', 'block', 'ring_panel', true);
  setActiveCamera('jewelry_camera');
});

initFullscreen('button_desk_fullscreen', true, function() {
  setCSSRuleStyle('backgroundImage', 'url(\'images/fullscreen_2.png\')', '.button-desk-4', true, '');
}, function() {
  setCSSRuleStyle('backgroundImage', 'url(\'images/fullscreen_1.png\')', '.button-desk-4', true, '');
}, function() {
  setHTMLElemStyle('display', 'none', 'button_desk_fullscreen', true);
});

var VARS = Object.defineProperties({}, {
    "horizontal_shelf": { get: function() { return horizontal_shelf; }, set: function(val) { horizontal_shelf = val; } },
});

Function('app', 'v3d', 'VARS', 'PROC', (('window.top.postMessage({' + '\n' +
'    name: \'elfsquad.triggerConfigurationUpdated\' ' + '\n' +
'}, \'*\');')))(appInstance, v3d, VARS, PROC);


elfsquadOnConfigurationUpdate(function() {
  setMorphFactor('mechanism_part', 'thikness', elfsquadGetValueByCode('thickness'));
  setMorphFactor('mechanism_part', 'corners', elfsquadGetValueByCode('corners'));
  setObjTransform('mechanism_slider_height', false, 'position', ['', '', elfsquadGetValueByName('Height')], false);
  updateHeight();
});
elfsquadOnStepChanged(function() {
  console.log(dictGet(elfsquadGetCurrentStep(), 'title'));
});
registerOnDrag('mechanism_slider_height', false, [0,1,2], function() {}, function() {
  dragMove('mechanism_slider_height', 'Z', 'i7yGLY1X#J^Zu{)^?NVL', 'NmKJ1,HQ7j!n0BbwuO#Q');
  updateHeight();
}, function() {}, 'NmKJ1,HQ7j!n0BbwuO#Q');

registerOnDrag('hole_controller_right', false, [0,1,2], function() {}, function() {
  dragMove('hole_controller_right', 'Z', 'X{*({y^^wUV7rl{wKoLN', 'fkXg$n{%emz6(*-`G~g`');
  setMorphFactor('mechanism_part', 'move_holes', (getObjTransform('hole_controller_right', false, 'position', 'z') - 0.25) * -2);
  setObjTransform('hole_controller_left', false, 'position', ['', '', getObjTransform('hole_controller_right', false, 'position', 'z')], false);
}, function() {}, 'fkXg$n{%emz6(*-`G~g`');

eventHTMLElem('click', 'button_mech_1', true, function(event) {
  setMorphFactor('mechanism_part', 'corners', 0);
  elfsquadUpdateRequirementByCode('corners', 0);});
eventHTMLElem('click', 'button_mech_2', true, function(event) {
  setMorphFactor('mechanism_part', 'corners', 0.5);
  elfsquadUpdateRequirementByCode('corners', 0.5);});
eventHTMLElem('click', 'button_mech_3', true, function(event) {
  setMorphFactor('mechanism_part', 'corners', 1);
  elfsquadUpdateRequirementByCode('corners', 1);});
eventHTMLElem('click', 'button_mech_4', true, function(event) {
  setMorphFactor('mechanism_part', 'thikness', 0);
  elfsquadUpdateRequirementByCode('thickness', 0);});
eventHTMLElem('click', 'button_mech_5', true, function(event) {
  setMorphFactor('mechanism_part', 'thikness', 0.5);
  elfsquadUpdateRequirementByCode('thickness', 0.5);});
eventHTMLElem('click', 'button_mech_6', true, function(event) {
  setMorphFactor('mechanism_part', 'thikness', 1);
  elfsquadUpdateRequirementByCode('thickness', 1);});

registerOnDrag('mechanism_slider_width_left', false, [0,1,2], function() {}, function() {
  dragMove('mechanism_slider_width_left', 'X', '4sWX93({[Zr/028_xbtw', 'L*ZXYvXmNpKml`6+7{NZ');
  setMorphFactor('mechanism_part', 'move_sides', (getObjTransform('mechanism_slider_width_left', false, 'position', 'x') + 0.25) * 8 * -1);
  setObjTransform('mechanism_slider_width_right', false, 'position', [getObjTransform('mechanism_slider_width_left', false, 'position', 'x') * -1, '', ''], false);
  setObjTransform('mechanism_slider_depth_left', false, 'position', [getObjTransform('mechanism_slider_width_left', false, 'position', 'x') + 0.025, '', ''], false);
  setObjTransform('mechanism_slider_depth_right', false, 'position', [(getObjTransform('mechanism_slider_width_left', false, 'position', 'x') + 0.025) * -1, '', ''], false);
  setObjTransform('hole_controller_left', false, 'position', [getObjTransform('mechanism_slider_width_left', false, 'position', 'x'), '', ''], false);
  setObjTransform('hole_controller_right', false, 'position', [getObjTransform('mechanism_slider_width_left', false, 'position', 'x') * -1, '', ''], false);
}, function() {}, 'L*ZXYvXmNpKml`6+7{NZ');

registerOnDrag('hole_controller_left', false, [0,1,2], function() {}, function() {
  dragMove('hole_controller_left', 'Z', '=1p3xZ+nxJl3O+|rmKLp', 'MADLfSJb0.7zubEo*-ho');
  setMorphFactor('mechanism_part', 'move_holes', (getObjTransform('hole_controller_left', false, 'position', 'z') - 0.25) * -2);
  setObjTransform('hole_controller_right', false, 'position', ['', '', getObjTransform('hole_controller_left', false, 'position', 'z')], false);
}, function() {}, 'MADLfSJb0.7zubEo*-ho');

registerOnDrag('mechanism_slider_depth_left', false, [0,1,2], function() {}, function() {
  dragMove('mechanism_slider_depth_left', 'Y', 'H9p8-NtvgH^=SNF{nXR:', '5ES+mOB-ugKBT)SR}IOo');
  setMorphFactor('mechanism_part', 'move_front', Math.abs((getObjTransform('mechanism_slider_depth_left', false, 'position', 'y') + 0.125) * 4));
  setObjTransform(['mechanism_slider_width_right', 'mechanism_slider_width_left'], false, 'position', ['', (getObjTransform('mechanism_slider_depth_left', false, 'position', 'y') + 0.125) / 2, ''], false);
  setObjTransform('mechanism_slider_depth_right', false, 'position', ['', getObjTransform('mechanism_slider_depth_left', false, 'position', 'y'), ''], false);
  setObjTransform('hole_controller_right', false, 'position', ['', getObjTransform('mechanism_slider_width_left', false, 'position', 'y'), ''], false);
  setObjTransform('hole_controller_left', false, 'position', ['', getObjTransform('mechanism_slider_width_left', false, 'position', 'y'), ''], false);
}, function() {}, '5ES+mOB-ugKBT)SR}IOo');

registerOnDrag('mechanism_slider_width_right', false, [0,1,2], function() {}, function() {
  dragMove('mechanism_slider_width_right', 'X', 'OlDaSi^=rWZHFHkU9#;8', 'xc@q9TIzFt1GwhjYpa%!');
  setMorphFactor('mechanism_part', 'move_sides', (getObjTransform('mechanism_slider_width_right', false, 'position', 'x') - 0.25) * 8);
  setObjTransform('mechanism_slider_width_left', false, 'position', [getObjTransform('mechanism_slider_width_right', false, 'position', 'x') * -1, '', ''], false);
  setObjTransform('mechanism_slider_depth_right', false, 'position', [getObjTransform('mechanism_slider_width_right', false, 'position', 'x') - 0.025, '', ''], false);
  setObjTransform('mechanism_slider_depth_left', false, 'position', [(getObjTransform('mechanism_slider_width_right', false, 'position', 'x') - 0.025) * -1, '', ''], false);
  setObjTransform('hole_controller_right', false, 'position', [getObjTransform('mechanism_slider_width_right', false, 'position', 'x'), '', ''], false);
  setObjTransform('hole_controller_left', false, 'position', [getObjTransform('mechanism_slider_width_right', false, 'position', 'x') * -1, '', ''], false);
}, function() {}, 'xc@q9TIzFt1GwhjYpa%!');

registerOnDrag('mechanism_slider_depth_right', false, [0,1,2], function() {}, function() {
  dragMove('mechanism_slider_depth_right', 'Y', 'U5EX,*%FaE_V_?pyjZAu', 'QP4C9WWf/G*7^i02;yQ+');
  setMorphFactor('mechanism_part', 'move_front', Math.abs((getObjTransform('mechanism_slider_depth_right', false, 'position', 'y') + 0.125) * 4));
  setObjTransform(['mechanism_slider_width_right', 'mechanism_slider_width_left'], false, 'position', ['', (getObjTransform('mechanism_slider_depth_right', false, 'position', 'y') + 0.125) / 2, ''], false);
  setObjTransform('mechanism_slider_depth_left', false, 'position', ['', getObjTransform('mechanism_slider_depth_right', false, 'position', 'y'), ''], false);
  setObjTransform('hole_controller_right', false, 'position', ['', getObjTransform('mechanism_slider_width_right', false, 'position', 'y'), ''], false);
  setObjTransform('hole_controller_left', false, 'position', ['', getObjTransform('mechanism_slider_width_right', false, 'position', 'y'), ''], false);
}, function() {}, 'QP4C9WWf/G*7^i02;yQ+');

horizontal_shelf = false;

registerOnDrag('shelf_slider_height_top', false, [0,1,2], function() {}, function() {
  dragMove('shelf_slider_height_top', 'Z', 'X{*({y^^wUV7rl{wKoLN', 'fkXg$n{%emz6(*-`G~g`');
  setMorphFactor('shelf', 'height', (getObjTransform('shelf_slider_height_top', false, 'position', 'z') - 0.125) * 8);
  setMorphFactor('shelf_wall', 'height', (getObjTransform('shelf_slider_height_top', false, 'position', 'z') - 0.125) * 8);
  setObjTransform('shelf_slider_height_bottom', false, 'position', ['', '', getObjTransform('shelf_slider_height_top', false, 'position', 'z') * -1], false);
}, function() {}, 'fkXg$n{%emz6(*-`G~g`');
registerOnDrag('shelf_slider_height_bottom', false, [0,1,2], function() {}, function() {
  dragMove('shelf_slider_height_bottom', 'Z', 'z{Er_gY?A=Y+-P_|W0SJ', '$lUIGpIB;d0ku^ZF!H{8');
  setMorphFactor('shelf', 'height', (getObjTransform('shelf_slider_height_bottom', false, 'position', 'z') + 0.125) * -8);
  setMorphFactor('shelf_wall', 'height', (getObjTransform('shelf_slider_height_bottom', false, 'position', 'z') + 0.125) * -8);
  setObjTransform('shelf_slider_height_top', false, 'position', ['', '', getObjTransform('shelf_slider_height_bottom', false, 'position', 'z') * -1], false);
}, function() {}, '$lUIGpIB;d0ku^ZF!H{8');
registerOnDrag('shelf_slider_width_right', false, [0,1,2], function() {}, function() {
  dragMove('shelf_slider_width_right', 'X', 'cJx/UZ}.QZE{`=C==/9N', '2.m.KR@zb-smZR?uRm:K');
  setMorphFactor('shelf', 'width', (getObjTransform('shelf_slider_width_right', false, 'position', 'x') - 0.25) * 4);
  setMorphFactor('horizontal_shelf', 'width', (getObjTransform('shelf_slider_width_right', false, 'position', 'x') - 0.25) * 4);
  setMorphFactor('shelf_wall', 'width', (getObjTransform('shelf_slider_width_right', false, 'position', 'x') - 0.25) * 4);
  setMaterialValue('self_wall', 'horizontal_shelf_width', (getObjTransform('shelf_slider_width_right', false, 'position', 'x') - 0.25) * 4 + 0.9);
  setObjTransform('shelf_slider_width_left', false, 'position', [getObjTransform('shelf_slider_width_right', false, 'position', 'x') * -1, '', ''], false);
}, function() {}, '2.m.KR@zb-smZR?uRm:K');
registerOnDrag('shelf_slider_width_left', false, [0,1,2], function() {}, function() {
  dragMove('shelf_slider_width_left', 'X', '=ET.4dd%lLTY`T*oJK4$', 'B@Qh()Jbo~)`!eu*a[kR');
  setMorphFactor('shelf', 'width', (getObjTransform('shelf_slider_width_left', false, 'position', 'x') + 0.25) * -4);
  setMorphFactor('horizontal_shelf', 'width', (getObjTransform('shelf_slider_width_left', false, 'position', 'x') + 0.25) * -4);
  setMorphFactor('shelf_wall', 'width', (getObjTransform('shelf_slider_width_left', false, 'position', 'x') + 0.25) * -4);
  setMaterialValue('self_wall', 'horizontal_shelf_width', (getObjTransform('shelf_slider_width_left', false, 'position', 'x') + 0.25) * -4 + 0.9);
  setObjTransform('shelf_slider_width_right', false, 'position', [getObjTransform('shelf_slider_width_left', false, 'position', 'x') * -1, '', ''], false);
}, function() {}, 'B@Qh()Jbo~)`!eu*a[kR');
registerOnDrag('shelf_slider_depth', false, [0,1,2], function() {}, function() {
  dragMove('shelf_slider_depth', 'Y', '*uaucKkD(1@5It6uw9*,', 'Kn8?-N{KPiDfa5w{Y^q]');
  setMorphFactor('shelf', 'depth', (getObjTransform('shelf_slider_depth', false, 'position', 'y') + 0.1) * 5 * -1);
  setMorphFactor('horizontal_shelf', 'depth', (getObjTransform('shelf_slider_depth', false, 'position', 'y') + 0.1) * 5 * -1);
  setObjTransform(['shelf_slider_width_left', 'shelf_slider_width_right', 'shelf_slider_height_top', 'shelf_slider_height_bottom'], false, 'position', ['', (getObjTransform('shelf_slider_depth', false, 'position', 'y') + 0.1) / 2, ''], false);
}, function() {}, 'Kn8?-N{KPiDfa5w{Y^q]');

eventHTMLElem('click', 'button_shelf_1', true, function(event) {
  if (getMorphFactor('shelf', 'horizontal_shelf') == 0) {
    changeVis('horizontal_shelf', true);
    setMorphFactor('shelf', 'horizontal_shelf', 1);
    setMaterialValue('self_wall', 'horizontal_shelf_ao', 1);
    horizontal_shelf = true;
  }
});
eventHTMLElem('click', 'button_shelf_2', true, function(event) {
  if (getMorphFactor('shelf', 'horizontal_shelf') == 1) {
    changeVis('horizontal_shelf', false);
    setMorphFactor('shelf', 'horizontal_shelf', 0);
    setMaterialValue('self_wall', 'horizontal_shelf_ao', 0);
    horizontal_shelf = false;
  }
});

registerOnDrag('ring_slider_size', false, [0,1,2], function() {}, function() {
  dragMove('ring_slider_size', 'Z', 'EC6dn5~VN-2M^jSJMDRq', 'O(xR)ugIAg.6OA%dw0Rx');
  setMorphFactor('ring', 'size', (getObjTransform('ring_slider_size', false, 'position', 'z') - 0.25) * 5);
}, function() {}, 'O(xR)ugIAg.6OA%dw0Rx');

eventHTMLElem('click', 'button_ring_1', true, function(event) {
  if (getMorphFactor('ring', 'ring_2') == 1) {

    animateParam(1, 0, 1, 'Linear', 'InOut', 0, false,
        function() {
      setMorphFactor('ring', 'ring_2', _pGlob.animateParamUpdate || 0);
      setMaterialValue('gold', 'ring_2_ao', _pGlob.animateParamUpdate || 0);
    },
        function() {});

        } else if (getMorphFactor('ring', 'ring_3') == 1) {

    animateParam(1, 0, 1, 'Linear', 'InOut', 0, false,
        function() {
      setMorphFactor('ring', 'ring_3', _pGlob.animateParamUpdate || 0);
      setMaterialValue('gold', 'ring_3_ao', _pGlob.animateParamUpdate || 0);
    },
        function() {});

        }
});
eventHTMLElem('click', 'button_ring_2', true, function(event) {
  if (getMorphFactor('ring', 'ring_3') == 0) {

    animateParam(0, 1, 1, 'Linear', 'InOut', 0, false,
        function() {
      setMorphFactor('ring', 'ring_2', _pGlob.animateParamUpdate || 0);
      setMaterialValue('gold', 'ring_2_ao', _pGlob.animateParamUpdate || 0);
    },
        function() {});

        } else if (getMorphFactor('ring', 'ring_3') == 1) {

    animateParam(1, 0, 0.5, 'Linear', 'InOut', 0, false,
        function() {
      setMorphFactor('ring', 'ring_3', _pGlob.animateParamUpdate || 0);
      setMaterialValue('gold', 'ring_3_ao', _pGlob.animateParamUpdate || 0);
    },
        function() {

      animateParam(0, 1, 0.5, 'Linear', 'InOut', 0, false,
          function() {
        setMorphFactor('ring', 'ring_2', _pGlob.animateParamUpdate || 0);
        setMaterialValue('gold', 'ring_2_ao', _pGlob.animateParamUpdate || 0);
      },
          function() {});

          });

        }
});
eventHTMLElem('click', 'button_ring_3', true, function(event) {
  if (getMorphFactor('ring', 'ring_2') == 0) {

    animateParam(0, 1, 1, 'Linear', 'InOut', 0, false,
        function() {
      setMorphFactor('ring', 'ring_3', _pGlob.animateParamUpdate || 0);
      setMaterialValue('gold', 'ring_3_ao', _pGlob.animateParamUpdate || 0);
    },
        function() {});

        } else if (getMorphFactor('ring', 'ring_2') == 1) {

    animateParam(1, 0, 0.5, 'Linear', 'InOut', 0, false,
        function() {
      setMorphFactor('ring', 'ring_2', _pGlob.animateParamUpdate || 0);
      setMaterialValue('gold', 'ring_2_ao', _pGlob.animateParamUpdate || 0);
    },
        function() {

      animateParam(0, 1, 0.5, 'Linear', 'InOut', 0, false,
          function() {
        setMorphFactor('ring', 'ring_3', _pGlob.animateParamUpdate || 0);
        setMaterialValue('gold', 'ring_3_ao', _pGlob.animateParamUpdate || 0);
      },
          function() {});

          });

        }
});



} // end of PL.init function

})(); // end of closure

/* ================================ end of code ============================= */
